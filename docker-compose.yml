version: '3.8'

services:
  mysql:
    build:
      context: ./mysql-container
      dockerfile: docker/Dockerfile
    container_name: mysql-csv-loader
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-amatriciana}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-ticketshopdb}
      MYSQL_USER: ${MYSQL_USER:-organiser}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-amatriciana}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db-tables:/var/lib/mysql-files/csv-data:rw
      - ./mysql-container/config/mysql.cnf:/etc/mysql/conf.d/custom.cnf:rw
      - ./mysql-container/init:/docker-entrypoint-initdb.d:ro
    networks:
      - mysql-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 40s

  cube:
    build:
      context: ./cube-core
      dockerfile: Dockerfile
    container_name: cube-semantic-layer
    environment:
      CUBEJS_DB_TYPE: mysql
      CUBEJS_DB_HOST: mysql
      CUBEJS_DB_PORT: 3306
      CUBEJS_DB_NAME: ${MYSQL_DATABASE:-ticketshopdb}
      CUBEJS_DB_USER: ${MYSQL_USER:-organiser}
      CUBEJS_DB_PASS: ${MYSQL_PASSWORD:-amatriciana}
      CUBEJS_DEV_MODE: true
      CUBEJS_API_SECRET: ${CUBEJS_API_SECRET:-baubeach}
      CUBEJS_WEB_SOCKETS: true
    ports:
      - "${CUBE_PORT:-4000}:4000"
    volumes:
      - ./cube-core/model:/cube/conf/model:rw
      - ./cube-core/config:/cube/conf/config:rw
    networks:
      - mysql-network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/readyz"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s

  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    container_name: query-orchestrator
    environment:
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}

      # CUBE Connection
      CUBE_BASE_URL: http://cube:4000
      CUBEJS_API_SECRET: ${CUBEJS_API_SECRET:-baubeach}

      # Cache Configuration
      CACHE_DIR: /app/cache

      # Logging
      PYTHONUNBUFFERED: 1

    ports:
      - "${ORCHESTRATOR_PORT:-8080}:8080"
    volumes:
      # Persistent cache for system prompts
      - orchestrator_cache:/app/cache
      # Logs directory
      - orchestrator_logs:/app/logs
      # Copy CUBE model definitions for system prompt generation
      - ./cube-core/model:/app/cube-models:ro
    networks:
      - mysql-network
    depends_on:
      cube:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/readyz"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 120s
    restart: unless-stopped

  chat-frontend:
    build:
      context: ./chat-frontend
      dockerfile: Dockerfile
    container_name: cube-chat-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - mysql-network
    depends_on:
      orchestrator:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s
    restart: unless-stopped

  analyst-agent:
    build:
      context: ./analyst-agent
      dockerfile: Dockerfile
    container_name: ai-data-analyst
    environment:
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}

      # Service Ports
      STREAMLIT_PORT: 8501
      ANALYST_API_PORT: 8502

      # Logging
      PYTHONUNBUFFERED: 1
    ports:
      - "${ANALYST_STREAMLIT_PORT:-8501}:8501"
      - "${ANALYST_API_PORT:-8502}:8502"
    volumes:
      # Persistent storage for datasets and analysis results
      - analyst_datasets:/app/analyst-service/datasets
      - analyst_results:/app/analyst-service/results
      - analyst_history:/app/analyst-service/history
    networks:
      - mysql-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  orchestrator_cache:
    driver: local
  orchestrator_logs:
    driver: local
  analyst_datasets:
    driver: local
  analyst_results:
    driver: local
  analyst_history:
    driver: local

networks:
  mysql-network:
    driver: bridge